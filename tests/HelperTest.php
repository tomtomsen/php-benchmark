<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../Benchmark/Benchmark.php';

/**
 * Test class for Helper.
 * Generated by PHPUnit on 2010-08-29 at 00:46:47.
 */
class HelperTest extends PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testConvertSecondsToTimeFormat_InvalidArguments()
    {
        self::assertFalse(Helper::convertSecondsToTimeFormat(true));
        self::assertFalse(Helper::convertSecondsToTimeFormat(array()));
        self::assertFalse(Helper::convertSecondsToTimeFormat('string'));
    }

    public function testConvertSecondsToTimeFormat_Seconds()
    {
        self::assertSame('10,0 s', Helper::convertSecondsToTimeFormat(10));
    }

    public function testConvertSecondsToTimeFormat_Milliseconds()
    {
        self::assertSame('100,0 ms', Helper::convertSecondsToTimeFormat(0.1));
    }

    public function testConvertSecondsToTimeFormat_Microseconds()
    {
        self::assertSame('100 &mu;s', Helper::convertSecondsToTimeFormat(0.0001));
    }

    public function testSortArrayAfterOtherArray()
    {
        $arr1 = array(
            'b' => 'test2',
            'a' => 'test1',
            'c' => 'test3',
        );
        $arr2 = array(
            'c' => 1,
            'b' => 2,
            'a' => 3,
        );

        $arr_result = Helper::sortArrayByOtherArray($arr1, $arr2);

        self::assertSame(array('test3', 'test2', 'test1'), array_values($arr_result));
    }

    public function testSortArrayAfterOtherArray2()
    {
        $arr1 = array(
            0 => 'test2',
            1 => 'test1',
            2 => 'test3',
        );
        $arr2 = array(
            1 => 1,
            2 => 2,
            0 => 3,
        );

        $arr_result = Helper::sortArrayByOtherArray($arr1, $arr2);

        self::assertSame(array('test1', 'test3', 'test2'), array_values($arr_result));
    }
}