<?php

/**
 * php-benchmark
 *
 * Copyright (c) 2002-2010, Tom Tomsen <tom.tomsen@inbox.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   * Neither the name of the University nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    Benchmark
 * @author     Tom Tomsen <tom.tomsen@inbox.com>
 * @copyright  2010 Tom Tomsen <tom.tomsen@inbox.com>
 * @license    http://www.opensource.org/licenses/bsd-license.php BSD License
 * @since      File available since Release 1.0.0
 */
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/TestHelper.php';
require_once dirname(__FILE__) . '/../Benchmark/Benchmark.php';

/**
 * Test class for Benchmark.
 * Generated by PHPUnit on 2010-08-24 at 10:34:40.
 */
class BenchmarkTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Benchmark
     */
    protected $benchmark;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->benchmark = new Benchmark('benchmark-title',
                        'benchmark-description');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testSetIterations() {
        $iterations = 1000;
        $this->benchmark->setIterations($iterations);

        self::assertSame($iterations, $this->benchmark->getIterations());
    }

    /**
     * Invalid values should not change the number of iterations
     */
    public function testSetIterations_InvalidValues() {
        $default_value = $this->benchmark->getIterations();

        $this->benchmark->setIterations(-1);
        $this->benchmark->setIterations(0);
        $this->benchmark->setIterations('string');
        $this->benchmark->setIterations(true);

        self::assertSame($default_value, $this->benchmark->getIterations(),
                        'invalid values shouldnt change iteration value');
    }

    /**
     * By default the iteration count should be greater than zero
     */
    public function testSetIterations_DefaultValue() {
        self::assertGreaterThan(0, $this->benchmark->getIterations(),
                        'default Value should be valid');
    }

    public function testAddTarget() {
        $targets = $this->benchmark->getTargets();
        self::assertSame(0, count($targets));

        TestHelper::includeComplexClass();
        TestHelper::includeDoSomethingFunction();

        $benchmark_function = new Functionn('doSomething', array(1, 2), 'description');
        $benchmark_method = new Method('ComplexClass', array(1, 2), 'doSomething', array(1, 2), 'description');

        $this->benchmark->addTarget($benchmark_function);
        $this->benchmark->addTarget($benchmark_method);

        $targets = $this->benchmark->getTargets();
        self::assertSame(2, count($targets));
        self::assertContains($benchmark_function, $targets);
        self::assertContains($benchmark_method, $targets);
    }

    public function testAddTarget_SameTargetMultipleTimes() {
        TestHelper::includeDoSomethingFunction();

        $target1 = new Functionn('doSomething', array(1, 2), 'description');
        $target2 = new Functionn('doSomething', array(1, 2), 'an other description');

        self::assertTrue($this->benchmark->addTarget($target1));
        self::assertFalse($this->benchmark->addTarget($target2));

        $targets = $this->benchmark->getTargets();
        self::assertSame(1, count($targets));
        self::assertSame($target1, reset($targets));
    }

    /**
     * By default getTarget should return an empty array
     */
    public function testGetTargets_DefaultValue() {
        self::assertSame(array(), $this->benchmark->getTargets(),
                        'targets expected to be empty after object being initialized');
    }

    /**
     * Added methods or function should be returned
     */
    public function testGetTargets() {
        require_once dirname(__FILE__) . '/helper/ComplexClass.php';
        require dirname(__FILE__) . '/helper/function_doSomething.php';

        $this->benchmark->addTarget(new Method('ComplexClass', array(1, 2), 'doSomething'));
        $this->benchmark->addTarget(new Functionn('doSomething'));

        $targets = $this->benchmark->getTargets();
        self::assertSame(2, count($targets));
    }

    /**
     * All attached observers should be called when notify gets executed
     */
    public function testNotify() {
        $observer = $this->getMock('IObserver', array('update'));

        $observer->expects($this->once())
                ->method('update')
                ->with($this->isInstanceOf('Benchmark'));

        $this->benchmark->attach($observer);
        $this->benchmark->notify(State::BENCHMARK_STARTED);
    }

    /**
     * Added observers should be removed by calling detach
     */
    public function testDetach() {
        $observer = $this->getMock('IObserver', array('update'));

        $observer->expects($this->never())
                ->method('update');

        $this->benchmark->attach($observer);
        $this->benchmark->detach($observer);
        $this->benchmark->notify(State::TARGET_EXECUTION_ENDED);
    }

    /**
     * An observer should added just once
     */
    public function testAttach_RedundantObservers() {
        $observer = $this->getMock('IObserver', array('update'));

        $observer->expects($this->once())
                ->method('update')
                ->with($this->isInstanceOf('Benchmark'));

        $this->benchmark->attach($observer);
        $this->benchmark->attach($observer);
        $this->benchmark->notify(State::TARGET_EXECUTION_ENDED);
    }

    /**
     * Title should be changed by calling setTitle
     */
    public function testSetTitle() {
        $title = 'new-title';

        $this->benchmark->setTitle($title);
        self::assertSame($title, $this->benchmark->getTitle());
    }

    /**
     * Title should stay the same, when setTitle gets called with
     * invalid arguments
     */
    public function testSetTitle_InvalidValue() {
        $current_title = $this->benchmark->getTitle();

        $this->benchmark->setTitle(true);
        $this->benchmark->setTitle(1234);

        self::assertSame($current_title, $this->benchmark->getTitle());
    }

    /**
     * By default getTitle should return the title given at the constructor
     */
    public function testGetTitle_DefaultValue() {

        $benchmark_title = 'new_title';

        $benchmark = new Benchmark($benchmark_title);
        self::assertSame($benchmark_title, $benchmark->getTitle());
    }

    /**
     * Description should be change after setting the description
     */
    public function testSetDescription() {
        $benchmark_description = 'new benchmark description';

        $this->benchmark->setDescription($benchmark_description);
        self::assertSame($benchmark_description, $this->benchmark->getDescription());
    }

    /**
     * When setDescription gets called with invalid values the old
     * description should stay
     */
    public function testSetDescription_InvalidValues() {

        $current_descr = $this->benchmark->getDescription();

        $this->benchmark->setDescription(1234);
        $this->benchmark->setDescription(true);

        self::assertSame($current_descr, $this->benchmark->getDescription());
    }

    /**
     * By default the description can be set by the constructor
     */
    public function testGetDescription_DefaultValue() {
        $benchmark = new Benchmark('benchmark-title');
        self::assertSame('', $benchmark->getDescription());
    }

    /**
     * @expectedException NoObserverGivenException
     */
    public function testRun_NoObserverGiven() {
        TestHelper::includeDoSomethingFunction();

        $benchmark_function = new Functionn('doSomething', array(1, 2), 'description');
        $this->benchmark->addTarget($benchmark_function);

        $this->benchmark->run();
    }

    /**
     * @expectedException NoTargetsGivenException
     */
    public function testRun_NoTargetGiven() {
        TestHelper::includeDoSomethingFunction();

        $observer_gui = new Gui();

        $benchmark_function = new Functionn('doSomething', array(1, 2), 'description');
        $this->benchmark->attach($observer_gui);

        $this->benchmark->run();
    }

}