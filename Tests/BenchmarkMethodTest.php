<?php

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/TestHelper.php';
require_once dirname(__FILE__) . '/../Benchmark/Benchmark.php';

/**
 * Test class for BenchmarkMethod.
 * Generated by PHPUnit on 2010-09-01 at 23:12:05.
 */
class BenchmarkMethodTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var BenchmarkMethod
     */
    protected $method;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->method = new BenchmarkMethod;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @todo Implement test__toString().
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testInvoke().
     */
    public function testInvoke()
    {
        TestHelper::includeComplexClass();

        $complexClass = $this->getMock('ComplexClass', array('doSomething'), array('param1', 'param2'));
        $complexClass->expects($this->once())
                ->method('doSomething')
                ->with($this->equalTo(1, 2));

        $this->method->setClass($complexClass);
        $this->method->setName('doSomething');
        $this->method->setArguments(array(1, 2));

        $this->method->invoke();
    }

    public function testInvoke_MethodNotSet()
    {
        TestHelper::includeComplexClass();

        $complexClass = new ComplexClass(1, 2);
        $this->method->setClass($complexClass);

        try {
            $this->method->invoke();
            self::fail('argetNotFoundException expected');
        } catch (TargetNotFoundException $ex) {
            self::assertContains('method', $ex->getMessage());
        }
    }

    public function testInvoke_ClassNotSet()
    {
        try {
            $this->method->invoke();
            self::fail('argetNotFoundException expected');
        } catch (TargetNotFoundException $ex) {
            self::assertContains('class', $ex->getMessage());
        }
    }

    public function testInvoke_ThrowsException()
    {
        TestHelper::includeComplexClass();

        $method = $this->getMock('BenchmarkMethod', array('getName', 'getClassName', '__toString'));

        $method->expects($this->once())
                ->method('getName')
                ->will($this->returnValue('methodName'));
        $method->expects($this->once())
                ->method('getClassName')
                ->will($this->returnValue('className'));

        try {
            $method->invoke();
            self::fail('TargetNotFoundException expected');
        } catch (TargetNotFoundException $ex) {
            self::assertContains('not found', $ex->getMessage());
        }
    }

    public function testSetClass()
    {
        TestHelper::includeComplexClass();

        $complexClass = new ComplexClass('param1', 'param2');
        $this->method->setClass($complexClass);

        self::assertSame($complexClass, $this->method->getClass());
    }

    public function testSetClass_InvalidArgument()
    {
        $this->method->setClass(1);
        $this->method->setClass(true);
        $this->method->setClass('ComplexClass');
        $this->method->setClass(array());

        self::assertNull($this->method->getClass());
        self::assertNull($this->method->getClassName());
    }

    public function testGetClass_DefaultValue()
    {
        self::assertNull($this->method->getClass());
    }

    public function testSetClassName()
    {
        TestHelper::includeComplexClass();

        $class_name = 'ComplexClass';
        $this->method->setClassName($class_name, array(1, 2));
        self::assertSame($class_name, $this->method->getClassName());
    }

    public function testSetClassName_UnknownClass()
    {
        try {
            $this->method->setClassName('UnknownClass');
            self::fail('argetNotFoundException expected');
        } catch (TargetNotFoundException $ex) {
            
        }
    }

    public function testSetClassName_InvalidArguments()
    {
        TestHelper::includeComplexClass();

        $class_name = 'ComplexClass';
        $this->method->setClassName($class_name, array(1, 2)); // fill with valid value

        $this->method->setClassName(1, array(1, 2)); // integer
        $this->method->setClassName(true, array(1, 2)); // boolean
        $this->method->setClassName(array(), array(1, 2)); // array
        $this->method->setClassName(new stdClass(), array(1, 2)); // object

        self::assertSame($class_name, $this->method->getClassName(),
                        'class name should be the same');
    }

    public function testSetClassName_WithConstructorArguments()
    {
        TestHelper::includeComplexClass();

        $args = array('param1', 'param2');
        $this->method->setClassName('ComplexClass', $args);

        self::assertSame($args, $this->method->getConstructorArguments());
    }

    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testSetClassName_WithInvalidConstructorArguments()
    {
        TestHelper::includeComplexClass();

        $args = array('param1');
        $this->method->setClassName('ComplexClass', $args);
    }

    public function testGetClassName_DefaultValue()
    {
        self::assertNull($this->method->getClassName());
    }

    public function testGetClassName_SetByConstructor()
    {
        TestHelper::includeComplexClass();

        $class_name = 'ComplexClass';
        $this->method = new BenchmarkMethod($class_name, array(1, 2));

        self::assertSame($class_name, $this->method->getClassName());
    }

    public function testSetName()
    {
        $method_name = 'doSomething';
        $this->method->setName($method_name);
        self::assertSame($method_name, $this->method->getName());
    }

    public function testSetName_InvalidArgument()
    {
        $method_name = 'doSomething';
        $this->method->setName($method_name); // Fill with valid data

        $this->method->setName(1); // integer
        $this->method->setName(true); // boolean
        $this->method->setName(array()); // array
        $this->method->setName(new stdClass()); // object

        self::assertSame($method_name, $this->method->getName());
    }

    public function testSetName_UnknownMethod()
    {
        TestHelper::includeComplexClass();

        $this->method->setClassName('ComplexClass', array(1, 2));

        try {
            $this->method->setName('unkownMethod');
            self::fail('argetNotFoundException expected');
        } catch (TargetNotFoundException $ex) {

        }
    }

    public function testGetName_DefaultValue()
    {
        self::assertNull($this->method->getName());
    }

    public function testGetName_SetByConstructor()
    {
        TestHelper::includeComplexClass();

        $method_name = 'doSomething';
        $this->method = new BenchmarkMethod('ComplexClass', array(1, 2), $method_name);

        self::assertSame($method_name, $this->method->getName());
    }

    public function testGetConstructorArguments()
    {
        TestHelper::includeComplexClass();

        $args = array(1, true, 'string', array());
        $this->method->setClassName('ComplexClass', $args);

        self::assertSame($args, $this->method->getConstructorArguments());
    }

    public function testGetConstructorArguments_DefaultValue()
    {
        self::assertSame(array(), $this->method->getConstructorArguments());
    }

    public function testGetConstructorArguments_SetByConstructor()
    {
        TestHelper::includeComplexClass();

        $args = array(1, true, 'string', array());
        $this->method = new BenchmarkMethod('ComplexClass', $args, 'doSomething', array(1, 2));

        self::assertSame($args, $this->method->getConstructorArguments());
    }

    public function testSetArguments()
    {
        $args = array(1, true, 'string', array());
        $this->method->setArguments($args);

        self::assertSame($args, $this->method->getArguments());
    }

    public function testGetArguments_DefaultValue()
    {
        self::assertSame(array(), $this->method->getArguments());
    }

    public function testGetArguments_SetByConstructor()
    {
        TestHelper::includeComplexClass();

        $args = array(1, true, 'string', array());
        $this->method = new BenchmarkMethod('ComplexClass', array(1, 2), 'doSomething', $args);

        self::assertSame($args, $this->method->getArguments());
    }

    public function testSetDescription()
    {
        $description = 'new description';
        $this->method->setDescription($description);

        self::assertSame($description, $this->method->getDescription());
    }

    public function testSetDescription_InvalidArguments()
    {
        $description = 'new description';
        $this->method->setDescription($description); // fill with valid data

        $this->method->setDescription(1); // number
        $this->method->setDescription(true); // boolean
        $this->method->setDescription(array()); // array
        $this->method->setDescription(new stdClass()); // object

        self::assertSame($description, $this->method->getDescription());
    }

    public function testGetDescription_DefaulValue()
    {
        self::assertNull($this->method->getDescription());
    }

    public function testGetDescription_SetByConstructor()
    {
        TestHelper::includeComplexClass();

        $description = 'new description';
        $this->method = new BenchmarkMethod('ComplexClass', array(1, 2), 'doSomething', array(1, 2), $description);

        self::assertSame($description, $this->method->getDescription());
    }

    public function testGetCode_DefaultValue()
    {
        self::assertFalse($this->method->getCode());
    }

    public function testGetCode_doSomething()
    {
        TestHelper::includeComplexClass();

        $this->method->setClassName('ComplexClass', array(1, 2));
        $this->method->setName('doSomething');
        $this->method->setArguments(array('param1', 'param2'));

        self::assertSame('        public function doSomething($param1, $param2)
        {
            $this->param1 = $param1;
            $this->param2 = $param2;
        }
', $this->method->getCode());
    }

    public function testGetUniqueId()
    {
        self::assertContains('target', $this->method->getUniqueId());
    }

    public function testGetUniqueId_AllAttributesSet()
    {
        TestHelper::includeComplexClass();

        $class = new ComplexClass(1, 2);
        $this->method->setClass($class);
        $this->method->setName('doSomething');
        $this->method->setArguments(array(1, 2));

        self::assertContains('doSomething', $this->method->getUniqueId());
        self::assertContains('ComplexClass', $this->method->getUniqueId());
    }

    public function testSetPreExecutedMethod()
    {
        TestHelper::includeComplexClass();

        global $doSomething2_called;
        global $doSomething2_arguments;

        self::assertFalse($doSomething2_called,
                        'doSomething must be uncalled');
        self::assertTrue(empty($doSomething2_arguments),
                        'doSomething must not have gotten any arguments');

        $complexclass = $this->getMock('ComplexClass', array('doSomething'), array(1, 2));

        $complexclass->expects($this->once())
                ->method('doSomething')
                ->with($this->equalTo(3, 4));

        $target = new BenchmarkMethod();
        $target->setClass($complexclass);
        $target->setName('doSomething');
        $target->setArguments(array(3, 4));

        $this->method->setPreExecutedTarget($target);
        $this->method->setClassName('ComplexClass', array('arg3', 'arg4'));
        $this->method->setName('doSomething');
        $this->method->setArguments(array('arg3', 'arg4'));
        $this->method->invoke();
    }

    public function testSetPostExecutedTarget()
    {
        TestHelper::includeComplexClass();

        global $doSomething2_called;
        global $doSomething2_arguments;

        self::assertFalse($doSomething2_called,
                        'doSomething must be uncalled');
        self::assertTrue(empty($doSomething2_arguments),
                        'doSomething must not have gotten any arguments');

        $complexclass = $this->getMock('ComplexClass', array('doSomething'), array(1, 2));

        $complexclass->expects($this->once())
                ->method('doSomething')
                ->with($this->equalTo(3, 4));

        $target = new BenchmarkMethod();
        $target->setClass($complexclass);
        $target->setName('doSomething');
        $target->setArguments(array(3, 4));

        $this->method->setPostExecutedTarget($target);
        $this->method->setClassName('ComplexClass', array('arg3', 'arg4'));
        $this->method->setName('doSomething');
        $this->method->setArguments(array('arg5', 'arg6'));
        $this->method->invoke();
    }

    /**
     * @expectedException PossibleRecursionException
     */
    public function testSetPreExecutedRecursiveTarget()
    {
        TestHelper::includeComplexClass();

        $complexClass = new ComplexClass(1, 2);

        $target = new BenchmarkMethod();
        $target->setClass($complexClass);
        $target->setName('doSomething');
        $target->setArguments(array(3, 4));
        $target->setPreExecutedTarget($target);

        $this->method->setPreExecutedTarget($target);
        $this->method->setClassName('ComplexClass', array('arg3', 'arg4'));
        $this->method->setName('doSomething');
        $this->method->setArguments(array('arg3', 'arg4'));
        $this->method->invoke();
    }

    /**
     * @expectedException PossibleRecursionException
     */
    public function testSetPostExecutedRecursiveTarget()
    {
        TestHelper::includeComplexClass();

        $complexClass = new ComplexClass(1, 2);

        $target = new BenchmarkMethod();
        $target->setClass($complexClass);
        $target->setName('doSomething');
        $target->setArguments(array(3, 4));
        $target->setPostExecutedTarget($target);

        $this->method->setPostExecutedTarget($target);
        $this->method->setClassName('ComplexClass', array('arg3', 'arg4'));
        $this->method->setName('doSomething');
        $this->method->setArguments(array('arg3', 'arg4'));
        $this->method->invoke();
    }

}