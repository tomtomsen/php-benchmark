<?php

/**
 * php-benchmark
 *
 * Copyright (c) 2002-2010, Tom Tomsen <tom.tomsen@inbox.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   * Neither the name of the University nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    Benchmark
 * @author     Tom Tomsen <tom.tomsen@inbox.com>
 * @copyright  2010 Tom Tomsen <tom.tomsen@inbox.com>
 * @license    http://www.opensource.org/licenses/bsd-license.php BSD License
 * @since      File available since Release 1.0.0
 */
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/TestHelper.php';
require_once dirname(__FILE__) . '/../Benchmark/Benchmark.php';

/**
 * Test class for Benchmark.
 * Generated by PHPUnit on 2010-08-24 at 10:34:40.
 */
class BenchmarkTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Benchmark
     */
    protected $benchmark;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->benchmark = new Benchmark('title');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testConstructor_Title_InvalidArgument() {
        try {
            new Benchmark(array()); // array
            self::fail('InvalidArgumentException expected');
        } catch (InvalidArgumentException $ex ) {}

        try {
            new Benchmark('');  // empty string
            self::fail('InvalidArgumentException expected');
        } catch (InvalidArgumentException $ex ) {}

        try {
            new Benchmark(1);   // integer
            self::fail('InvalidArgumentException expected');
        } catch (InvalidArgumentException $ex ) {}
    }

    /**
     * @expectedException NoTargetsGivenException
     */
    public function testRun_NoTargetGiven() {
        TestHelper::includeDoSomethingFunction();

        $observer_gui = new Gui();

        $benchmark_function = new BenchmarkFunction('doSomething', array(1, 2), 'description');
        $this->benchmark->setGui($observer_gui);

        $this->benchmark->run('title');
    }

    public function testRun_ObserversGetNotified() {
        $iterations = 2;
        TestHelper::includeDoSomethingFunction();

        $observer = $this->getMock('ILogObserver', array());

        $observer->expects($this->exactly(2*$iterations+2)) // bm_started/stopped + target_started/stopped per iteration
                 ->method('update');

        $this->benchmark->setIterations($iterations);
        $this->benchmark->addTarget(new BenchmarkFunction('doSomething', array(1, 2)));
        $this->benchmark->addLogger($observer);

        ob_start(); // hide output
        $this->benchmark->run();
        ob_end_clean();
    }

    public function testRun_TargetFunctionGetsInvoked() {
        $args = array(1,2);
        
        TestHelper::includeDoSomethingFunction();

        global $doSomething_called;
        global $doSomething_arguments;
        
        self::assertFalse($doSomething_called);

        $this->benchmark->setIterations(1);
        $this->benchmark->addTarget(new BenchmarkFunction('doSomething', $args));

        ob_start();
        $this->benchmark->run();
        ob_end_clean();

        self::assertTrue($doSomething_called);
        self::assertSame($args, $doSomething_arguments);
    }

    public function testRun_TargetMethodGetsInvoked() {
        $c_args = array(5,6);
        $args = array(3,4);
        $iterations = 2;

        TestHelper::includeComplexClass();

        $method = $this->getMock('ComplexClass', array(), $c_args);

        $method->expects($this->exactly($iterations))
               ->method('doSomething')
               ->with($args[0], $args[1]);

        $target = new BenchmarkMethod();
        $target->setClass($method);
        $target->setName('doSomething');
        $target->setArguments($args);
        
        $this->benchmark->setIterations($iterations);
        $this->benchmark->addTarget($target);

        ob_start();
        $this->benchmark->run();
        ob_end_clean();
    }

    public function testAddTarget() {
        $targets = $this->benchmark->getTargets();
        self::assertSame(0, count($targets));

        TestHelper::includeComplexClass();
        TestHelper::includeDoSomethingFunction();

        $benchmark_function = new BenchmarkFunction('doSomething', array(1, 2), 'description');
        $benchmark_method = new BenchmarkMethod('ComplexClass', array(1, 2), 'doSomething', array(1, 2), 'description');

        $this->benchmark->addTarget($benchmark_function);
        $this->benchmark->addTarget($benchmark_method);

        $targets = $this->benchmark->getTargets();
        self::assertSame(2, count($targets));
    }

    public function testAddTarget_SameTargetMultipleTimes() {
        TestHelper::includeDoSomethingFunction();

        $target1 = new BenchmarkFunction('doSomething', array(1, 2), 'description');

        $this->benchmark->addTarget($target1);
        $this->benchmark->addTarget($target1);

        $targets = $this->benchmark->getTargets();
        self::assertSame(2, count($targets));
    }

    public function testGetTargets_DefaultValue() {
        self::assertSame(array(), $this->benchmark->getTargets(),
                        'targets expected to be empty after object being initialized');
    }

    public function testGetTargets() {
        require_once dirname(__FILE__) . '/Helper/ComplexClass.php';
        require dirname(__FILE__) . '/Helper/function_doSomething.php';

        $this->benchmark->addTarget(new BenchmarkMethod('ComplexClass', array(1, 2), 'doSomething'));
        $this->benchmark->addTarget(new BenchmarkFunction('doSomething'));

        $targets = $this->benchmark->getTargets();
        self::assertSame(2, count($targets));
    }

    public function testGetTitle_DefaultValue() {
        TestHelper::includeDoSomethingFunction();

        $benchmark_title = 'new_title';

        $benchmark = new Benchmark($benchmark_title);
        self::assertSame($benchmark_title, $benchmark->getTitle());
    }
    
    public function testGetTitle_EqualToValueSetByConstructor() {
        $title = uniqid('title');

        $benchmark = new Benchmark($title);
        self::assertSame($title, $benchmark->getTitle());
    }
    
    public function testGetDescription_DefaultValue() {
        self::assertSame('', $this->benchmark->getDescription());
    }

    public function testGetDescription_EqualToValueGivenToConstructor() {
        $descr = uniqid('description');

        $benchmark = new Benchmark('title', $descr);
        self::assertSame($descr, $benchmark->getDescription());
    }

    public function testGetCurrentTarget_CalledBeforeBenchmarkRun() {
        self::assertNull($this->benchmark->getCurrentTarget());
    }

    public function testGetCurrentTarget_CalledWhileBenchmarkIsRunning() {
        $this->markTestIncomplete();
    }

    public function testGetCurrentTarget_CalledAfterBenchmarkHasRun() {
        TestHelper::includeDoSomethingFunction();

        $target1 = new BenchmarkFunction('doSomething', array(1,2));
        $target2 = new BenchmarkFunction('doSomething', array(3,4));
        $this->benchmark->addTarget($target1);
        $this->benchmark->addTarget($target2);
        $this->benchmark->setIterations(1);

        ob_start();
        $this->benchmark->run();
        ob_end_clean();

        self::assertEquals($target2, $this->benchmark->getCurrentTarget());
    }

    public function testGetLatestResult_CalledBeforeBenchmarkRun() {
        self::assertNull($this->benchmark->getLatestResult());
    }

    public function testGetLatestResult_CalledWhileBenchmarkIsRunning() {
        $this->markTestIncomplete();
    }

    public function testGetLatestResult_CalledAfterBenchmarkHasRun() {
        TestHelper::includeDoSomethingFunction();

        $target1 = new BenchmarkFunction('doSomething', array(1,2));
        $this->benchmark->addTarget($target1);
        $this->benchmark->setIterations(1);

        ob_start();
        $this->benchmark->run();
        ob_end_clean();

        self::assertNotNull($this->benchmark->getLatestResult());
        self::assertTrue($this->benchmark->getLatestResult() instanceof Result);
    }

    public function testGetCurrentIteration_CalledBeforeBenchmarkRun() {
        self::assertSame(0, $this->benchmark->getCurrentIteration());
    }

    public function testGetCurrentIteration_CalledWhileBenchmarkIsRunning() {
        $this->markTestIncomplete();
    }

    public function testGetCurrentIteration_CalledAfterBenchmarkHasRun() {
        $iterations = 4;
        TestHelper::includeDoSomethingFunction();

        $target1 = new BenchmarkFunction('doSomething', array(1,2));
        $this->benchmark->addTarget($target1);
        $this->benchmark->setIterations($iterations);

        ob_start();
        $this->benchmark->run();
        ob_end_clean();

        self::assertSame($iterations, $this->benchmark->getCurrentIteration());
    }

    public function testSetIterations() {
        $iterations = 1000;
        $this->benchmark->setIterations($iterations);

        self::assertSame($iterations, $this->benchmark->getIterations());
    }

    public function testSetIterations_InvalidValues() {
        $default_value = $this->benchmark->getIterations();

        $this->benchmark->setIterations(-1);
        $this->benchmark->setIterations(0);
        $this->benchmark->setIterations('string');
        $this->benchmark->setIterations(true);

        self::assertSame($default_value, $this->benchmark->getIterations(),
                        'invalid values shouldnt change iteration value');
    }

    public function testGetIterations_DefaultValue() {
        self::assertGreaterThan(0, $this->benchmark->getIterations(),
                        'default Value should be valid');
    }

    public function testSetGui() {
        $gui = new Gui();
        $this->benchmark->setGui($gui);

        self::assertSame($gui, $this->benchmark->getGui());
    }

    public function testGetGui_DefaultValue() {
        self::assertTrue($this->benchmark->getGui() instanceof Gui);
    }

    public function testAddLogger() {
        $logger = $this->getMock('ILogObserver', array(), array(), 'Observer_1');
        $logger2 = $this->getMock('ILogObserver', array(), array(), 'Observer_2');

        $this->benchmark->addLogger($logger);

        self::assertSame(1, count($this->benchmark->getLogger()));

        $this->benchmark->addLogger($logger2);

        self::assertSame(2, count($this->benchmark->getLogger()));

        $this->benchmark->addLogger($logger2); // already added

        self::assertSame(2, count($this->benchmark->getLogger()));
    }

    public function testGetLogger_DefaultValue()  {
        self::assertSame(array(), $this->benchmark->getLogger());
    }

    public function testRemoveLogger() {

        $logger = $this->getMock('ILogObserver', array(), array(), 'Observer1');
        $logger2 = $this->getMock('ILogObserver', array(), array(), 'Observer2');

        $this->benchmark->addLogger($logger);
        $this->benchmark->addLogger($logger2);

        self::assertSame(2, count($this->benchmark->getLogger()));

        $this->benchmark->removeLogger($logger);

        self::assertSame(array($logger2), $this->benchmark->getLogger());
    }

}